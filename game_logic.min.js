/****************************************************************************
 * activeScene.js
 ***************************************************************************/

(function( babylonProject,  undefined )
{
    babylonProject.activeScene = null;

    babylonProject.changeScene = function( sceneCreationFunction ) 
    {
        babylonProject.activeScene = sceneCreationFunction();
    };

} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * createVRScene.js
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    babylonProject.createVRScene = function ()
    {
        let scene = new babylonProject.BABYLON.Scene ( 
                babylonProject.engine );

        scene.createDefaultEnvironment ();
        
        scene.createDefaultVRExperience ();

        return scene;
    };
} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * externalDependencies.js
 *
 * Pointers to external objects such as DOM objects and library objects
 * are managed within this file.
 *
 * Mocking the values from this file allows the dependencies to be mocked
 * during testing.
 ***************************************************************************/


( function ( babylonProject, undefined )
{
    //HTML Canvas DOM object that is used for rendering.
    babylonProject.canvas = null;

    //pointer to the BABYLON library object.
    babylonProject.BABYLON = null;

    //reference to the Babylon 3D engine
    babylonProject.engine = null;

} ( window.babylonProject = window.babylonProject || {} ));


/****************************************************************************
 * jQueryDomFunctions.js
 * 
 * Functions where the game interacts with the DOM are defined here.
 *
 * This function is outside the coverage of unit testing as it was 
 * awkward to mock jQuery and the DOM.
 *
 * Where possible it simply  passes DOM objects to a function within the
 * scope of tests.
 ***************************************************************************/

(function( babylonProject, startScene, $,  undefined )
{
    //Called when all HTML/DOM objects have been loaded.
    $(document).ready(function() 
    {
        babylonProject.pageLoaded ( document, BABYLON );
    });

    //Dynamically resizes the canvas as the browser window changes.
    $(window).on("resize load", function()
    {
        if ( babylonProject.engine )
        {
            babylonProject.engine.resize();
        }
    });

} ( window.babylonProject = window.babylonProject || {},
    window.startScene = window.startScene || {},
    jQuery));

( function ( babylonProject, undefined )
{
    babylonProject.pageLoaded = function ( documentRef, babylonRef )
    {
        babylonProject.canvas = 
            documentRef.querySelector( "#renderCanvas" );

        babylonProject.BABYLON = babylonRef;

        babylonProject.engine = 
            new babylonProject.BABYLON.Engine (
                    babylonProject.canvas, true );

        babylonProject.changeScene ( babylonProject.startScene );

        babylonProject.startVR ( babylonProject.activeScene );

        babylonProject.engine.runRenderLoop ( babylonProject.renderLoop );
    };
} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * renderLoop.js
 *
 * This is the main game loop that is used to update objects and render
 * the active scene.
 ***************************************************************************/

( function ( babylonProject, undefined )
{

    babylonProject.renderLoop = function ()
    {
        babylonProject.activeScene.render();
    };

} ( window.babylonProject = window.babylonProject || {} ));

(function( babylonProject ,  undefined )
{
    babylonProject.startScene = function(  ) 
    {
        var BABYLON = babylonProject.BABYLON;

        // Now create a basic Babylon Scene object
        var scene = new BABYLON.Scene(babylonProject.engine);

        // create the default environment
        let environment = scene.createDefaultEnvironment (
                {
                    enableGroundShadow : true,
                    groundYBias : 1
                });

        // This creates and positions a free camera
        var camera = new BABYLON.FreeCamera(
                "camera1",
                new BABYLON.Vector3(0, 5, -10),
                scene);

        // This targets the camera to scene origin
        camera.setTarget(BABYLON.Vector3.Zero());
        
        // This attaches the camera to the canvas
        camera.attachControl(babylonProject.canvas, false);
       
        // This creates a light, aiming 0,1,0 - to the sky.
        var light = new BABYLON.HemisphericLight(
                "light1",
                new BABYLON.Vector3(0, 1, 0),
                scene);

        // Dim the light a small amount
        light.intensity = .5;

        // Let's try our built-in 'sphere' shape.
        var sphere = BABYLON.MeshBuilder.
            CreateSphere("sphere1",
                         { segments : 16, diameter: 2},
                         scene);
      
        // Move the sphere upward 1/2 its height
        sphere.position.y = 1;
     
        
        return scene;
    };

} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * VRHelper.js 
 *
 * Provides access to the VR functionality of BabylonJS.
 ***************************************************************************/


( function ( babylonProject, undefined )
{
    //Referenc to the VRExperienceHelper
    babylonProject.VRHelper = null;

    babylonProject.startVR = function ( scene )
    {
        babylonProject.VRHelper = 
            scene.createDefaultVRExperience (
            {
                createDeviceOrientationCamera : false
            });        

        babylonProject.VRHelper.enableTeleportation (
            {
                floorMeshName : "ground"
            });
        
        babylonProject.VRHelper.enableInteractions ();
    };

} ( window.babylonProject = window.babylonProject || {} ));

