/****************************************************************************
 * createVRScene.js
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    babylonProject.createVRScene = function ()
    {
        let scene = new babylonProject.BABYLON.Scene ( 
                babylonProject.engine );

        scene.createDefaultEnvironment ();
        
        scene.createDefaultVRExperience ();

        return scene;
    };
} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * externalDependencies.js
 *
 * Pointers to external objects such as DOM objects and library objects
 * are managed within this file.
 *
 * Mocking the values from this file allows the dependencies to be mocked
 * during testing.
 ***************************************************************************/


( function ( babylonProject, undefined )
{
    //HTML Canvas DOM object that is used for rendering.
    babylonProject.canvas = null;

    //pointer to the BABYLON library object.
    babylonProject.BABYLON = null;

    //reference to the Babylon 3D engine
    babylonProject.engine = null;

} ( window.babylonProject = window.babylonProject || {} ));


( function ( babylonProject, gameState, undefined )
{

    gameState.StartState = function ( scene )
    {
        if ( scene == undefined )
        {
            throw new Error ( "Scene argument is undefined" );
        }

        this.update = function ()
        {
            return this;
        };
    }; 

} ( window.babylonProject = window.babylonProject || {},

    window.babylonProject.gameState =  
        window.babylonProject.gameState || {} ));

/****************************************************************************
 * gameLoop.js
 *
 * This is the main game loop that is used to update objects and render
 * the scene.
 *
 * A finite state machine is used to switch between logical scenarios
 * such as the main menu or gameplay.
 *
 * The states are defined as objects in ./game_state
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * The current game state that will be updated during game loop cycles.
     *
     * The initial value is set i pageLoaded.js when the game starts.
     */
    babylonProject.gameState = null;

    babylonProject.gameLoop = function ()
    {
        babylonProject.activeScene.render();
    };

} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * jQueryDomFunctions.js
 * 
 * Functions where the game interacts with the DOM are defined here.
 *
 * This function is outside the coverage of unit testing as it was 
 * awkward to mock jQuery and the DOM.
 *
 * Where possible it simply  passes DOM objects to a function within the
 * scope of tests.
 ***************************************************************************/

(function( babylonProject, startScene, $,  undefined )
{
    //Called when all HTML/DOM objects have been loaded.
    $(document).ready(function() 
    {
        babylonProject.pageLoaded ( document, BABYLON );
    });

    //Dynamically resizes the canvas as the browser window changes.
    $(window).on("resize load", function()
    {
        if ( babylonProject.engine )
        {
            babylonProject.engine.resize();
        }
    });

} ( window.babylonProject = window.babylonProject || {},
    window.startScene = window.startScene || {},
    jQuery));

( function ( babylonProject, undefined )
{
    babylonProject.pageLoaded = function ( documentRef, babylonRef )
    {
        babylonProject.canvas = 
            documentRef.querySelector( "#renderCanvas" );

        babylonProject.BABYLON = babylonRef;

        babylonProject.engine = 
            new babylonProject.BABYLON.Engine (
                    babylonProject.canvas, true );

        let scene =  babylonProject.createVRScene ();

        babylonProject.engine.runRenderLoop ( babylonProject.gameLoop );
    };
} ( window.babylonProject = window.babylonProject || {} ));
