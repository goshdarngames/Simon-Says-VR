/****************************************************************************
 * createVRScene.js
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    babylonProject.createVRScene = function ( babylon, engine )
    {
        let scene = new babylon.Scene ( engine );

        scene.createDefaultEnvironment ();
        
        scene.createDefaultVRExperience ();

        return scene;
    };
} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * externalDependencies.js
 *
 * Pointers to external objects such as DOM objects and library objects
 * are managed within this file.
 *
 * Mocking the values from this file allows the dependencies to be mocked
 * during testing.
 ***************************************************************************/


( function ( babylonProject, undefined )
{
    //HTML Canvas DOM object that is used for rendering.
    babylonProject.canvas = null;

    //pointer to the BABYLON library object.
    babylonProject.BABYLON = null;

    //reference to the Babylon 3D engine
    babylonProject.engine = null;

} ( window.babylonProject = window.babylonProject || {} ));


( function ( babylonProject, gameState, undefined )
{

    gameState.StartState = function ( babylonScene )
    {
        if ( babylonScene == undefined )
        {
            throw new Error ( "Scene argument is undefined" );
        }

        this.babylonScene = babylonScene;

        this.update = function ()
        {
            this.babylonScene.render ();

            return this;
        };
    }; 

} ( window.babylonProject = window.babylonProject || {},

    window.babylonProject.gameState =  
        window.babylonProject.gameState || {} ));

/****************************************************************************
 * gameLoop.js
 *
 * This is the main game loop that is used to update objects and render
 * the scene.
 *
 * A finite state machine is used to switch between logical scenarios
 * such as the main menu or gameplay.
 *
 * The states are defined as objects in ./game_state
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * The current game state that will be updated during game loop cycles.
     *
     * The initial value is set i pageLoaded.js when the game starts.
     */
    babylonProject.currentGameState = null;

    babylonProject.gameLoop = function ()
    {
        //update state and store return value as current state
        babylonProject.currentGameState = 
            babylonProject.currentGameState.update (); 
    };

} ( window.babylonProject = window.babylonProject || {} ));

/****************************************************************************
 * jQueryDomFunctions.js
 * 
 * Functions where the game interacts with the DOM are defined here.
 *
 * This function is outside the coverage of unit testing as it was 
 * awkward to mock jQuery and the DOM.
 *
 * Where possible it simply  passes DOM objects to a function within the
 * scope of tests.
 ***************************************************************************/

(function( babylonProject, startScene, $,  undefined )
{
    //Called when all HTML/DOM objects have been loaded.
    $(document).ready(function() 
    {
        babylonProject.pageLoaded ( document, BABYLON );
    });

    //Dynamically resizes the canvas as the browser window changes.
    $(window).on("resize load", function()
    {
        if ( babylonProject.engine )
        {
            babylonProject.engine.resize();
        }
    });

} ( window.babylonProject = window.babylonProject || {},
    window.startScene = window.startScene || {},
    jQuery));

/****************************************************************************
 * pageLoaded.js
 *
 * The page loaded function is called by the jQueryDomFunctions.js 
 * module when the HTML Document is ready.
 *
 * This is the entry point into the game logic.  The game should be 
 * initialized and the first state of the finite state machine defined
 * in game_state/ should be loaded for the game loop to execute.
 ***************************************************************************/

( function ( babylonProject, undefined )
{
    /**
     * pageLoaded ( documentRef, babylonRef )
     *
     * The first game logic function that is called when the
     * HTML page is ready.
     *
     * Parameters:
     *  - documentRef: The HTML DOM object 'document'
     *  - babylonRef : A reference to the Babylon object
     */
    babylonProject.pageLoaded = function ( documentRef, babylonRef )
    {
        let canvas = documentRef.querySelector( "#renderCanvas" );

        let engine = babylonProject.createBabylonEngine (
                    babylonRef, babylonProject.canvas );

        let scene =  babylonProject.createVRScene (
                babylonRef, engine );

        let startState = new window.babylonProject
            .gameState.StartState( scene );

        babylonProject.currentGameState = startState;

        engine.runRenderLoop ( babylonProject.gameLoop );
    };

    /**
     * createBabylonEngine ( babylonRef, canvas )
     *
     * The call to the constructor of the Babylon engine has been 
     * encapsulated within this factory method to enable mocking
     * of the engine object during testing.
     */
    babylonProject.createBabylonEngine = function ( babylonRef, canvas )
    {
        return new babylonRef.Engine ( canvas, true );
    };
} ( window.babylonProject = window.babylonProject || {} ));
